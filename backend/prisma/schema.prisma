// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  password             String
  firstName            String
  lastName             String
  role                 Role
  refreshToken         String?
  company              String?
  skills               String[]
  bio                  String?
  portfolio            String?
  events               Event[]              @relation("OrganizerEvents")
  applications         Application[]        @relation("FreelancerApplications")
  lockedApplications   Application[]        @relation("LockedByApplications")
  applicationHistories ApplicationHistory[] @relation("UserApplicationHistory")
}

model Event {
  id           String        @id @default(uuid())
  title        String
  date         DateTime
  description  String
  location     String
  services     String[]
  budget       Float
  organizer    User          @relation("OrganizerEvents", fields: [organizerId], references: [id])
  organizerId  String
  applications Application[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now())
}

model Application {
  id               String               @id @default(uuid())
  event            Event                @relation(fields: [eventId], references: [id])
  eventId          String
  freelancer       User                 @relation("FreelancerApplications", fields: [freelancerId], references: [id])
  freelancerId     String
  status           ApplicationStatus
  message          String
  rateQuote        Float
  rejectedMessage  String?
  cancelledMessage String?
  withdrawnMessage String?
  deleted          Boolean              @default(false)
  lockedAt         DateTime?
  lockedBy         User?                @relation("LockedByApplications", fields: [lockedById], references: [id])
  lockedById       String?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @default(now())
  history          ApplicationHistory[]
}

model ApplicationHistory {
  id             String             @id @default(uuid())
  application    Application        @relation(fields: [applicationId], references: [id])
  applicationId  String
  previousStatus ApplicationStatus?
  newStatus      ApplicationStatus
  changedBy      User               @relation("UserApplicationHistory", fields: [changedById], references: [id])
  changedById    String
  timestamp      DateTime           @default(now())
  reason         String?
  comment        String?
}

enum Role {
  ORGANIZER
  FREELANCER
  ADMIN
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  CANCELLED
  WITHDRAWN
}
